sudo: required
language: bash
git:
  depth: 1

before_install:
  - . test-helpers/helpers.sh
  - utils_setup
  - docker_setup
  - gce_setup

install: true

# This is too messy... Needs to be dumped into a bash script or something.
# Works for today.
script:
  - . test-helpers/helpers.sh
  - generate_safe_tag
  - generate_cluster_name
  - boot_gke_cluster
  - docker_login
  - docker_get_jwt
  - docker_pull_build_push
  - prep_pxc_cluster
  - boot_pmm_server
  - boot_pxc_cluster
  - check_logs mysql-0
  - wait_for_pod mysql-1
  - check_logs mysql-1
  - wait_for_pod mysql-2
  - check_logs mysql-2

  # - boot_proxysql
  # - sleep 30
  # - check_logs proxysql-0
  # - boot_test_artifact
  # - whack_test_artifact
  # - check_logs php-test-artifact-0
  - untag_images
  - docker_expire_jwt
  - gcloud container clusters delete $CLUSTER_NAME

after_failure:
  - . test-helpers/helpers.sh
  - generate_safe_tag
  - generate_cluster_name
  - gcloud container clusters delete $CLUSTER_NAME
  - "echo -n \"mysql 0: $LOGS_0\""
  - "echo -n \"mysql 1: $LOGS_1\""
  - "echo -n \"mysql 2: $LOGS_2\""
  - "echo -n \"proxysql: $PROXYSQL_LOGS\""
  - "echo -n \"webserver: $PHP_TEST_ARTIFACT_LOGS\""
  - "echo -n \"ab results: $AB_RESULTS\""

after_success:
  - "echo -n \"webserver: $PHP_TEST_ARTIFACT_LOGS\""
  - "echo -n \"ab results: $AB_RESULTS\""

deploy:
  # deploy develop to the staging environment
  # - provider: script
  #   script: bash scripts/deploy.sh staging
  #   on:
  #     branch: develop
  # deploy master to production
  - provider: script
    script: |-
      . test-helpers/helpers.sh
      deploy
    on:
      branch: master
